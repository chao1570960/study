
策略模式涉及到的角色主要包括
封装角色：上层访问策略的入口，它持有抽象策略角色的引用。
抽象策略角色：提供接口或者抽象类，定义策略组必须拥有的方法和属性。
具体策略角色：实现抽象策略，定义具体的算法逻辑。


策略模式的优点
(1)策略模式提供了管理相关的算法族的办法。策略类的等级结构定义了一个算法或行为族。
恰当使用继承可以 把公共的代码移到父类里面，从而避免代码重复。
(2)使用策略模式可以避免使用多重条件(if-else)语句。多重条件语句不易维护，
它把采取哪一种算法或采取哪一 种行为的逻辑与算法或行为的逻辑混合在一起，
统统列在一个多重条件语句里面，比使用继承的办法还要原始和落后。

策略模式的缺点
(1)客户端必须知道所有的策略类，并自行决定使用哪一个策略类。
这就意味着客户端必须理解这些算法的区 别，以便适时选择恰当的算法类。
换言之，策略模式只适用于客户端知道算法或行为的情况。
(2)由于策略模式把每个具体的策略实现都单独封装成为类，
如果备选的策略很多的话，那么对象的数目就会很 可观。
