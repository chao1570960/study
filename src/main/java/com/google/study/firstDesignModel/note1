
# 工厂模式 （六大设计原则中的单一原则）
为了保证类的创建以及使用的解耦合，放置对象过于复杂

# 简单工厂模式
将工厂又抽象了一层，

# 抽象工厂模式


策略模式，根据不同的条件，可以选择相应的策略，所有的
判断在策略模式中完成


策略模式和工厂模式相结合，可以使得策略中的判断也可以省去


单例模式：工作中使用的不多，但是框架中和面试中遇见的会比较多
需要关注 double check 和volatile（放置jvm的指令重排）

volatile指令重排序 在执行程序时，为了提供性能，处理器和编译器常常会对指令进行重排序，
但是不能随意重排序，不是你想怎么 排序就怎么排序，它需要满足以下两个条件:
1. 在单线程环境下不能改变程序运行的结果;
2. 存在数据依赖关系的不允许重排序

synchronized
锁对象和锁方法决定锁的时长，决定锁的粒度

类加载顺序


命令模式（发布者，接受者，命令本身）
why
在业务复杂的情况下，client和server可能会为不同人开发，
二者之间交互的桥梁

策略模式在线程池中具体的策略中用到的比较多





